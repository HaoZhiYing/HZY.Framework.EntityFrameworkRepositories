<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HzyEFCoreRepositories</name>
    </assembly>
    <members>
        <member name="T:HzyEFCoreRepositories.DbContexts.BaseDbContext`1">
            <summary>
            基础上下文
            </summary>
            <typeparam name="TDbContext"></typeparam>
        </member>
        <member name="M:HzyEFCoreRepositories.DbContexts.BaseDbContext`1.BeginTransaction">
            <summary>
            事务
            </summary>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.DbContexts.BaseDbContext`1.BeginTransactionAsync">
            <summary>
            事务
            </summary>
            <returns></returns>
        </member>
        <member name="P:HzyEFCoreRepositories.DbContexts.BaseDbContext`1.UnitOfWork">
            <summary>
            工作单元
            </summary>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.DbContexts.BaseDbContext`1.CommitOpen">
            <summary>
            开启 提交
            </summary>
        </member>
        <member name="M:HzyEFCoreRepositories.DbContexts.BaseDbContext`1.Commit">
            <summary>
            提交
            </summary>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.DbContexts.BaseDbContext`1.CommitAsync">
            <summary>
            提交
            </summary>
            <returns></returns>
        </member>
        <member name="T:HzyEFCoreRepositories.ExpressionTree.ExpressionTreeExtensions">
            <summary>
            表达式树扩展
            </summary>
        </member>
        <member name="M:HzyEFCoreRepositories.ExpressionTree.ExpressionTreeExtensions.Contains``2(System.String,System.Collections.Generic.IEnumerable{``1},System.String)">
            <summary>
            生成包含表达式
            例如：w=> new [] {1,2,3}.Contains(w.Key)
            </summary>
            <param name="fieldName"></param>
            <param name="items"></param>
            <param name="lambdaParameterName"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.ExpressionTree.ExpressionTreeExtensions.Equal``2(System.String,``1,System.String)">
            <summary>
            生成等等于表达式
            例如：w=>w.Key == Guid.Empty
            </summary>
            <param name="fieldName"></param>
            <param name="value"></param>
            <param name="lambdaParameterName"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.ExpressionTree.ExpressionTreeExtensions.MemberInit``1(``0,System.String)">
            <summary>
            对象实例化
            例如：w => new User{ Name="hzy" }
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.ExpressionTree.ExpressionTreeExtensions.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            两个拉姆达表达式相连接
            例如：w=>w.Key == Guid.Empty AND new [] {1,2,3}.Contains(w.Key)
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.ExpressionTree.ExpressionTreeExtensions.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            两个拉姆达表达式 为或者关系
            例如：w=>w.Key == Guid.Empty || new [] {1,2,3}.Contains(w.Key)
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.ExpressionTree.ExpressionTreeExtensions.Contains``1(System.Type,System.String,System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            生成包含表达式
            例如：w=> new [] {1,2,3}.Contains(w.Key)
            </summary>
            <param name="modelType"></param>
            <param name="fieldName"></param>
            <param name="items"></param>
            <param name="lambdaParameterName"></param>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.ExpressionTree.ExpressionTreeExtensions.Equal``1(System.Type,System.String,``0,System.String)">
            <summary>
            生成等等于表达式
            例如：w=>w.Key == Guid.Empty
            </summary>
            <param name="modelType"></param>
            <param name="fieldName"></param>
            <param name="value"></param>
            <param name="lambdaParameterName"></param>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="T:HzyEFCoreRepositories.ExpressionTree.ReplateParameterExpressionVisitor`1">
            <summary>
            将拉姆达参数 w=> 部分修改替换
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:HzyEFCoreRepositories.ExpressionTree.ReplateParameterExpressionVisitor`1._parameterName">
            <summary>
            被替换后新的参数名称
            </summary>
        </member>
        <member name="T:HzyEFCoreRepositories.Extensions.EFCoreRepositoryExtensions">
            <summary>
            仓储扩展
            </summary>
        </member>
        <member name="M:HzyEFCoreRepositories.Extensions.EFCoreRepositoryExtensions.GetPropertyInfos(System.Type,System.Reflection.BindingFlags)">
            <summary>
            获取 PropertyInfo 集合
            </summary>
            <param name="type"></param>
            <param name="bindingFlags"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Extensions.EFCoreRepositoryExtensions.CreateInstance``1">
            <summary>
            创建 对象实例
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Extensions.EFCoreRepositoryExtensions.GetAttribute``1(System.Type,System.String)">
            <summary>
            获取 对象 中 某个属性得 标记
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Extensions.EFCoreRepositoryExtensions.GetPropertyInfo(System.Type,System.String)">
            <summary>
            获取 PropertyInfo 对象
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Extensions.EFCoreRepositoryExtensions.GetKeyProperty(System.Type,System.Boolean)">
            <summary>
            获取 模型 有 Key 特性得 属性对象
            </summary>
            <param name="type"></param>
            <param name="isCheckKey"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:HzyEFCoreRepositories.Extensions.EFCoreRepositoryExtensions.HasKey(System.Reflection.PropertyInfo)">
            <summary>
            是否有 KeyAttribute 标记
            </summary>
            <param name="propertyInfo"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Extensions.EFCoreRepositoryExtensions.WhereIf``1(System.Linq.IQueryable{``0},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            WhereIf
            </summary>
            <param name="query"></param>
            <param name="if"></param>
            <param name="expWhere"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Extensions.EFCoreRepositoryExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Boolean})">
            <summary>
            WhereIf
            </summary>
            <param name="query"></param>
            <param name="if"></param>
            <param name="expWhere"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Extensions.EFCoreRepositoryExtensions.Page``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)">
            <summary>
            Page 分页简写
            </summary>
            <param name="query"></param>
            <param name="page"></param>
            <param name="rows"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:HzyEFCoreRepositories.Repositories.BaseRepository`2">
            <summary>
            基础仓储 实现
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TDbContext"></typeparam>
        </member>
        <member name="P:HzyEFCoreRepositories.Repositories.BaseRepository`2.Orm">
            <summary>
            DbContext 对象
            </summary>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.BaseRepository`2.SetAttach(`0,Microsoft.EntityFrameworkCore.EntityState)">
            <summary>
            设置 跟踪 Attachq
            </summary>
            <param name="model"></param>
            <param name="entityState"></param>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.BaseRepository`2.GetKeyExpression(System.Object)">
            <summary>
            生成表达式树 例如：( w=>w.Key==Guid.Empty )
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.BaseRepository`2.AddQueryFilter(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            添加检索过滤
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.BaseRepository`2.IgnoreQueryFilter">
            <summary>
            忽略查询过滤条件
            </summary>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.BaseRepository`2.RecoveryQueryFilter">
            <summary>
            恢复忽略查询过滤条件
            </summary>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.BaseRepository`2.Query(System.Boolean)">
            <summary>
            查询
            </summary>
            <param name="isTracking">是否追踪</param>
            <returns></returns>
        </member>
        <member name="P:HzyEFCoreRepositories.Repositories.BaseRepository`2.Select">
            <summary>
            查询 有跟踪
            </summary>
        </member>
        <member name="P:HzyEFCoreRepositories.Repositories.BaseRepository`2.SelectNoTracking">
            <summary>
            查询 无跟踪
            </summary>
        </member>
    </members>
</doc>
