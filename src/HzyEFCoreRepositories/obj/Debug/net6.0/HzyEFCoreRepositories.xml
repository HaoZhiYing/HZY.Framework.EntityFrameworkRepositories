<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HzyEFCoreRepositories</name>
    </assembly>
    <members>
        <member name="T:HzyEFCoreRepositories.DbContexts.BaseDbContext`1">
            <summary>
            基础上下文
            </summary>
            <typeparam name="TDbContext"></typeparam>
        </member>
        <member name="M:HzyEFCoreRepositories.DbContexts.BaseDbContext`1.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{`0})">
            <summary>
            基础上下文
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:HzyEFCoreRepositories.DbContexts.BaseDbContext`1.BeginTransaction">
            <summary>
            事务
            </summary>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.DbContexts.BaseDbContext`1.BeginTransactionAsync">
            <summary>
            事务
            </summary>
            <returns></returns>
        </member>
        <member name="P:HzyEFCoreRepositories.DbContexts.BaseDbContext`1.UnitOfWork">
            <summary>
            工作单元
            </summary>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.DbContexts.BaseDbContext`1.CommitOpen">
            <summary>
            开启 提交
            </summary>
        </member>
        <member name="M:HzyEFCoreRepositories.DbContexts.BaseDbContext`1.Commit">
            <summary>
            提交
            </summary>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.DbContexts.BaseDbContext`1.CommitAsync">
            <summary>
            提交
            </summary>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.DbContexts.BaseDbContext`1.SaveChanges">
            <summary>
            保存提交变更
            </summary>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.DbContexts.BaseDbContext`1.SaveChanges(System.Boolean)">
            <summary>
            保存提交变更
            </summary>
            <param name="acceptAllChangesOnSuccess"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.DbContexts.BaseDbContext`1.SaveChangesAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            保存提交变更
            </summary>
            <param name="acceptAllChangesOnSuccess"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.DbContexts.BaseDbContext`1.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
            保存提交变更
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:HzyEFCoreRepositories.ExpressionTree.ExpressionTreeExtensions">
            <summary>
            表达式树扩展
            </summary>
        </member>
        <member name="M:HzyEFCoreRepositories.ExpressionTree.ExpressionTreeExtensions.Contains``2(System.String,System.Collections.Generic.IEnumerable{``1},System.String)">
            <summary>
            生成包含表达式
            例如：w=> new [] {1,2,3}.Contains(w.Key)
            </summary>
            <param name="fieldName"></param>
            <param name="items"></param>
            <param name="lambdaParameterName"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.ExpressionTree.ExpressionTreeExtensions.Equal``2(System.String,``1,System.String)">
            <summary>
            生成等等于表达式
            例如：w=>w.Key == Guid.Empty
            </summary>
            <param name="fieldName"></param>
            <param name="value"></param>
            <param name="lambdaParameterName"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.ExpressionTree.ExpressionTreeExtensions.MemberInit``1(``0,System.String)">
            <summary>
            对象实例化
            例如：w => new User{ Name="hzy" }
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.ExpressionTree.ExpressionTreeExtensions.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            两个拉姆达表达式相连接
            例如：w=>w.Key == Guid.Empty AND new [] {1,2,3}.Contains(w.Key)
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.ExpressionTree.ExpressionTreeExtensions.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            两个拉姆达表达式 为或者关系
            例如：w=>w.Key == Guid.Empty || new [] {1,2,3}.Contains(w.Key)
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.ExpressionTree.ExpressionTreeExtensions.Contains``1(System.Type,System.String,System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            生成包含表达式
            例如：w=> new [] {1,2,3}.Contains(w.Key)
            </summary>
            <param name="modelType"></param>
            <param name="fieldName"></param>
            <param name="items"></param>
            <param name="lambdaParameterName"></param>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.ExpressionTree.ExpressionTreeExtensions.Equal``1(System.Type,System.String,``0,System.String)">
            <summary>
            生成等等于表达式
            例如：w=>w.Key == Guid.Empty
            </summary>
            <param name="modelType"></param>
            <param name="fieldName"></param>
            <param name="value"></param>
            <param name="lambdaParameterName"></param>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="T:HzyEFCoreRepositories.ExpressionTree.ReplateParameterExpressionVisitor`1">
            <summary>
            将拉姆达参数 w=> 部分修改替换
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:HzyEFCoreRepositories.ExpressionTree.ReplateParameterExpressionVisitor`1._parameterName">
            <summary>
            被替换后新的参数名称
            </summary>
        </member>
        <member name="T:HzyEFCoreRepositories.Extensions.DatabaseFacadeExtensions">
            <summary>
            DatabaseFacade 扩展
            </summary>
        </member>
        <member name="M:HzyEFCoreRepositories.Extensions.DatabaseFacadeExtensions.QueryDataTableBySql(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Object[])">
            <summary>
            根据 sql 查询表格
            </summary>
            <param name="database"></param>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Extensions.DatabaseFacadeExtensions.QueryDataTableBySqlAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Object[])">
            <summary>
            根据 sql 查询表格
            </summary>
            <param name="database"></param>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Extensions.DatabaseFacadeExtensions.QueryDicBySql(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Object[])">
            <summary>
            根据 sql 查询字典集合
            </summary>
            <param name="database"></param>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Extensions.DatabaseFacadeExtensions.QueryDicBySqlAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Object[])">
            <summary>
            根据 sql 查询字典集合
            </summary>
            <param name="database"></param>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Extensions.DatabaseFacadeExtensions.QueryBySql``1(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Object[])">
            <summary>
            查询根据sql语句
            </summary>
            <typeparam name="T"></typeparam>
            <param name="database"></param>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Extensions.DatabaseFacadeExtensions.QueryBySqlAsync``1(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Object[])">
            <summary>
            查询根据sql语句
            </summary>
            <typeparam name="T"></typeparam>
            <param name="database"></param>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Extensions.DatabaseFacadeExtensions.QueryScalarBySql(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Object[])">
            <summary>
            查询根据sql返回单个值
            </summary>
            <param name="database"></param>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Extensions.DatabaseFacadeExtensions.QueryScalarBySql``1(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Object[])">
            <summary>
            查询根据sql返回单个值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="database"></param>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Extensions.DatabaseFacadeExtensions.QueryScalarBySqlAsync``1(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Object[])">
            <summary>
            查询根据sql返回单个值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="database"></param>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:HzyEFCoreRepositories.Extensions.EFCoreRepositoryExtensions">
            <summary>
            仓储扩展
            </summary>
        </member>
        <member name="M:HzyEFCoreRepositories.Extensions.EFCoreRepositoryExtensions.GetPropertyInfos(System.Type,System.Reflection.BindingFlags)">
            <summary>
            获取 PropertyInfo 集合
            </summary>
            <param name="type"></param>
            <param name="bindingFlags"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Extensions.EFCoreRepositoryExtensions.CreateInstance``1">
            <summary>
            创建 对象实例
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Extensions.EFCoreRepositoryExtensions.GetAttribute``1(System.Type,System.String)">
            <summary>
            获取 对象 中 某个属性得 标记
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Extensions.EFCoreRepositoryExtensions.GetPropertyInfo(System.Type,System.String)">
            <summary>
            获取 PropertyInfo 对象
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Extensions.EFCoreRepositoryExtensions.GetKeyProperty(System.Type,System.Boolean)">
            <summary>
            获取 模型 有 Key 特性得 属性对象
            </summary>
            <param name="type"></param>
            <param name="isCheckKey"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:HzyEFCoreRepositories.Extensions.EFCoreRepositoryExtensions.HasKey(System.Reflection.PropertyInfo)">
            <summary>
            是否有 KeyAttribute 标记
            </summary>
            <param name="propertyInfo"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Extensions.EFCoreRepositoryExtensions.WhereIf``1(System.Linq.IQueryable{``0},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            WhereIf
            </summary>
            <param name="query"></param>
            <param name="if"></param>
            <param name="expWhere"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Extensions.EFCoreRepositoryExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Boolean})">
            <summary>
            WhereIf
            </summary>
            <param name="query"></param>
            <param name="if"></param>
            <param name="expWhere"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Extensions.EFCoreRepositoryExtensions.Page``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)">
            <summary>
            Page 分页简写
            </summary>
            <param name="query"></param>
            <param name="page"></param>
            <param name="rows"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:HzyEFCoreRepositories.Repositories.Impl.BaseRepository`2">
            <summary>
            基础仓储 实现
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TDbContext"></typeparam>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.Impl.BaseRepository`2.#ctor(`1,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            基础仓储
            </summary>
            <param name="context">dbcontext 上下文</param>
            <param name="filter">过滤条件</param>
        </member>
        <member name="P:HzyEFCoreRepositories.Repositories.Impl.BaseRepository`2.Orm">
            <summary>
            DbContext 对象
            </summary>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.Impl.BaseRepository`2.SetAttach(`0,Microsoft.EntityFrameworkCore.EntityState)">
            <summary>
            设置 跟踪 Attachq
            </summary>
            <param name="model"></param>
            <param name="entityState"></param>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.Impl.BaseRepository`2.GetKeyExpression(System.Object)">
            <summary>
            生成表达式树 例如：( w=>w.Key==Guid.Empty )
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.Impl.BaseRepository`2.AddQueryFilter(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            添加检索过滤
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.Impl.BaseRepository`2.IgnoreQueryFilter">
            <summary>
            忽略查询过滤条件
            </summary>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.Impl.BaseRepository`2.RecoveryQueryFilter">
            <summary>
            恢复忽略查询过滤条件
            </summary>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.Impl.BaseRepository`2.Query(System.Boolean)">
            <summary>
            查询
            </summary>
            <param name="isTracking">是否追踪</param>
            <returns></returns>
        </member>
        <member name="P:HzyEFCoreRepositories.Repositories.Impl.BaseRepository`2.Select">
            <summary>
            查询 有跟踪
            </summary>
        </member>
        <member name="P:HzyEFCoreRepositories.Repositories.Impl.BaseRepository`2.SelectNoTracking">
            <summary>
            查询 无跟踪
            </summary>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.Impl.BaseRepository`2.ExecuteSqlRaw(System.String,System.Object[])">
            <summary>
            执行sql 返回受影响的行数 insert|update|delete
            </summary>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.Impl.BaseRepository`2.ExecuteSqlRaw(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            执行sql 返回受影响的行数 insert|update|delete
            </summary>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.Impl.BaseRepository`2.ExecuteSqlRawAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            执行sql 返回受影响的行数 insert|update|delete
            </summary>
            <param name="sql"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.Impl.BaseRepository`2.ExecuteSqlRawAsync(System.String,System.Object[])">
            <summary>
            执行sql 返回受影响的行数 insert|update|delete
            </summary>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.Impl.BaseRepository`2.ExecuteSqlRawAsync(System.String,System.Collections.Generic.IEnumerable{System.Object},System.Threading.CancellationToken)">
            <summary>
            执行sql 返回受影响的行数 insert|update|delete
            </summary>
            <param name="sql"></param>
            <param name="parameters"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.Impl.BaseRepository`2.QueryBySql(System.String,System.Object[])">
            <summary>
            查询根据sql语句
            </summary>
            <returns> IQueryable </returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.Impl.BaseRepository`2.QueryDataTableBySql(System.String,System.Object[])">
            <summary>
            根据 sql 查询表格
            </summary>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.Impl.BaseRepository`2.QueryDataTableBySqlAsync(System.String,System.Object[])">
            <summary>
            根据 sql 查询表格
            </summary>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.Impl.BaseRepository`2.QueryDicBySql(System.String,System.Object[])">
            <summary>
            根据 sql 查询字典集合
            </summary>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.Impl.BaseRepository`2.QueryDicBySqlAsync(System.String,System.Object[])">
            <summary>
            根据 sql 查询字典集合
            </summary>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.Impl.BaseRepository`2.QueryBySql``1(System.String,System.Object[])">
            <summary>
            查询根据sql语句
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.Impl.BaseRepository`2.QueryBySqlAsync``1(System.String,System.Object[])">
            <summary>
            查询根据sql语句
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.Impl.BaseRepository`2.QueryScalarBySql(System.String,System.Object[])">
            <summary>
            查询根据sql返回单个值
            </summary>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.Impl.BaseRepository`2.QueryScalarBySql``1(System.String,System.Object[])">
            <summary>
            查询根据sql返回单个值
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.Impl.BaseRepository`2.QueryScalarBySqlAsync``1(System.String,System.Object[])">
            <summary>
            查询根据sql返回单个值
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:HzyEFCoreRepositories.Repositories.Impl.UnitOfWork">
            <summary>
            工作单元
            </summary>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.Impl.UnitOfWork.GetSaveState">
            <summary>
            获取保存状态
            </summary>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.Impl.UnitOfWork.SetSaveState(System.Boolean)">
            <summary>
            设置保存状态
            </summary>
            <param name="saveSate"></param>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.Impl.UnitOfWork.CommitOpen">
            <summary>
            打开延迟提交
            </summary>
        </member>
        <member name="T:HzyEFCoreRepositories.Repositories.IRepository`2">
            <summary>
            仓储接口
            </summary>
            <typeparam name="T">实体</typeparam>
            <typeparam name="TDbContext">dbcontext 数据上下文</typeparam>
        </member>
        <member name="P:HzyEFCoreRepositories.Repositories.IRepository`2.Orm">
            <summary>
            获取 dbcontext 对象
            </summary>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.SetAttach(`0,Microsoft.EntityFrameworkCore.EntityState)">
            <summary>
            设置 Attach
            </summary>
            <param name="model"></param>
            <param name="entityState"></param>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.GetKeyExpression(System.Object)">
            <summary>
            传入一个 值 获取实体 key 的 表达式
            </summary>
            <param name="value"></param>
            <returns> w => w.Id = 1 </returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.Insert(`0)">
            <summary>
            插入
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.InsertRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量插入
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.InsertAsync(`0)">
            <summary>
            插入
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.InsertRangeAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量插入
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.Update(`0)">
            <summary>
            更新
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.UpdateById(`0)">
            <summary>
            根据实体id更新数据
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.Update(`0,`0)">
            <summary>
            更新，通过原模型 修改为新模型
            </summary>
            <param name="oldModel"></param>
            <param name="newModel"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.UpdateRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            更新 批量
            </summary>
            <param name="models"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.UpdateAsync(`0)">
            <summary>
            更新
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.UpdateByIdAsync(`0)">
            <summary>
            根据实体id更新数据
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.UpdateAsync(`0,`0)">
            <summary>
            更新，通过原模型 修改为新模型
            </summary>
            <param name="oldModel"></param>
            <param name="newModel"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.UpdateRangeAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            更新 批量
            </summary>
            <param name="models"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.InsertOrUpdate(`0)">
            <summary>
            插入或者添加 根据实体 主键判断是否添加还是修改
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.InsertOrUpdateAsync(`0)">
            <summary>
            插入或者添加 根据实体 主键判断是否添加还是修改
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.Delete(`0)">
            <summary>
            删除
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.Delete(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            删除 批量
            </summary>
            <param name="models"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            删除 根据表达式
            </summary>
            <param name="expWhere"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.DeleteById``1(``0)">
            <summary>
            删除 根据id
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.DeleteByIds``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            删除 根据 id集合
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.DeleteAsync(`0)">
            <summary>
            删除
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.DeleteAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            删除 批量
            </summary>
            <param name="models"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            删除 根据表达式
            </summary>
            <param name="expWhere"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.DeleteByIdAsync``1(``0)">
            <summary>
            删除 根据 id
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.DeleteByIdsAsync``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            删除 根据id集合
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.AddQueryFilter(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            加入查询过滤条件
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.IgnoreQueryFilter">
            <summary>
            忽略查询过滤条件
            </summary>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.RecoveryQueryFilter">
            <summary>
            恢复忽略查询过滤条件
            </summary>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.Query(System.Boolean)">
            <summary>
            查询
            </summary>
            <param name="isTracking"></param>
            <returns></returns>
        </member>
        <member name="P:HzyEFCoreRepositories.Repositories.IRepository`2.Select">
            <summary>
            查询 带有实体追踪
            </summary>
        </member>
        <member name="P:HzyEFCoreRepositories.Repositories.IRepository`2.SelectNoTracking">
            <summary>
            查询 取消实体追踪
            </summary>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查询 根据条件
            </summary>
            <param name="expWhere"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.FindById``1(``0)">
            <summary>
            查询 根据id
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.FindByIds``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            查询 根据id集合
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.FindAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查询 根据条件
            </summary>
            <param name="expWhere"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.FindByIdAsync``1(``0)">
            <summary>
            查询 根据id
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.FindByIdsAsync``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            查询 根据id集合
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.ToList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取列表 根据查询条件
            </summary>
            <param name="expWhere"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.ToListAll">
            <summary>
            获取所有数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.ToListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取列表 根据查询条件
            </summary>
            <param name="expWhere"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.ToListAllAsync">
            <summary>
            获取所有数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.Count">
            <summary>
            获取数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.CountLong">
            <summary>
            获取数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取数量 根据条件
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.CountLong(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取数量 根据条件
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.Any(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            是否存在 根据条件
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.CountAsync">
            <summary>
            获取数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.CountLongAsync">
            <summary>
            获取数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取数量 根据条件
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.CountLongAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取数量 根据条件
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.AnyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            是否存在 根据条件
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.ExecuteSqlRaw(System.String,System.Object[])">
            <summary>
            执行sql 返回受影响的行数 insert|update|delete
            </summary>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.ExecuteSqlRaw(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            执行sql 返回受影响的行数 insert|update|delete
            </summary>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.ExecuteSqlRawAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            执行sql 返回受影响的行数 insert|update|delete
            </summary>
            <param name="sql"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.ExecuteSqlRawAsync(System.String,System.Object[])">
            <summary>
            执行sql 返回受影响的行数 insert|update|delete
            </summary>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.ExecuteSqlRawAsync(System.String,System.Collections.Generic.IEnumerable{System.Object},System.Threading.CancellationToken)">
            <summary>
            执行sql 返回受影响的行数 insert|update|delete
            </summary>
            <param name="sql"></param>
            <param name="parameters"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.QueryBySql(System.String,System.Object[])">
            <summary>
            查询根据sql语句
            </summary>
            <returns> IQueryable </returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.QueryDataTableBySql(System.String,System.Object[])">
            <summary>
            根据 sql 查询表格
            </summary>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.QueryDataTableBySqlAsync(System.String,System.Object[])">
            <summary>
            根据 sql 查询表格
            </summary>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.QueryDicBySql(System.String,System.Object[])">
            <summary>
            根据 sql 查询字典集合
            </summary>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.QueryDicBySqlAsync(System.String,System.Object[])">
            <summary>
            根据 sql 查询字典集合
            </summary>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.QueryBySql``1(System.String,System.Object[])">
            <summary>
            查询根据sql语句
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.QueryBySqlAsync``1(System.String,System.Object[])">
            <summary>
            查询根据sql语句
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.QueryScalarBySql(System.String,System.Object[])">
            <summary>
            查询根据sql返回单个值
            </summary>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.QueryScalarBySql``1(System.String,System.Object[])">
            <summary>
            查询根据sql返回单个值
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IRepository`2.QueryScalarBySqlAsync``1(System.String,System.Object[])">
            <summary>
            查询根据sql返回单个值
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IUnitOfWork.GetSaveState">
            <summary>
            获取保存状态
            </summary>
            <returns></returns>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IUnitOfWork.SetSaveState(System.Boolean)">
            <summary>
            设置保存状态
            </summary>
            <param name="saveSate"></param>
        </member>
        <member name="M:HzyEFCoreRepositories.Repositories.IUnitOfWork.CommitOpen">
            <summary>
            打开延迟提交
            </summary>
        </member>
    </members>
</doc>
